plugins {
    id 'net.neoforged.jarcompatibilitychecker' version '0.1.3'
}

checkJarCompatibility {
    isAPI = true
}

configurations {
    devagent
    localRuntime {
        canBeResolved = false
        canBeConsumed = false
    }
    runtimeClasspath.extendsFrom(localRuntime)
}

abstract class WriteVirtualJarManifestTask extends DefaultTask {
    // String-based to avoid Gradle trying to fingerprint these
    @Input
    abstract MapProperty<String, List<String>> getVirtualJars()

    @OutputFile
    abstract RegularFileProperty getOutputFile()

    @TaskAction
    def write() {
        var p = new Properties()

        for (var entry in getVirtualJars().get().entrySet()) {
            p.setProperty(entry.key, String.join(File.pathSeparator, entry.value))
        }

        getOutputFile().get().asFile.withWriter("utf-8") { writer ->
            p.store(writer, "")
        }
    }
}

tasks.register("createVirtualJarManifest", WriteVirtualJarManifestTask.class) {
    it.group = "build"
    it.outputFile.set(project.layout.buildDirectory.file("virtualJarManifest.properties"))
    it.virtualJars.put(
            "main",
            sourceSets.main.output.elements.map { it.collect { loc -> loc.asFile.absolutePath.replace('\\', '/') } }
    )
}

dependencies {
    compileOnly("org.jetbrains:annotations:${jetbrains_annotations_version}")

    api("org.ow2.asm:asm:${asm_version}")
    api("org.ow2.asm:asm-tree:${asm_version}")
    api("org.ow2.asm:asm-commons:${asm_version}")
    api("net.neoforged:mergetool:${mergetool_version}:api")
    api("org.apache.logging.log4j:log4j-api:${log4j_version}")
    api("org.slf4j:slf4j-api:${slf4j_api_version}")
    api("com.google.guava:guava:${guava_version}")
    api("com.google.code.gson:gson:${gson_version}")
    api("org.apache.maven:maven-artifact:${apache_maven_artifact_version}")
    api("org.apache.commons:commons-lang3:${apache_commons_lang3_version}")
    api("com.electronwill.night-config:core:${nightconfig_version}")
    api("com.electronwill.night-config:toml:${nightconfig_version}")
    api("cpw.mods:modlauncher:${modlauncher_version}")
    api("net.neoforged:coremods:${coremods_version}")
    api("com.mojang:logging:${mojang_logging_version}")
    api "net.neoforged:JarJarSelector:${jarjar_version}"
    api "net.neoforged:JarJarMetadata:${jarjar_version}"
    api("net.neoforged:bus:${eventbus_version}")
    implementation("net.neoforged:JarJarFileSystems:$jarjar_version")

    implementation("net.sf.jopt-simple:jopt-simple:${jopt_simple_version}")
    implementation("cpw.mods:securejarhandler:${securejarhandler_version}")
    implementation("net.neoforged:accesstransformers:${accesstransformers_version}")
    implementation("net.neoforged.accesstransformers:at-modlauncher:${accesstransformers_version}") {
        exclude module: 'modlauncher'
    }
    implementation("net.fabricmc:sponge-mixin:${mixin_version}")
    implementation("commons-io:commons-io:${commons_io_version}")

    implementation("org.apache.logging.log4j:log4j-core:${log4j_version}")
    annotationProcessor("org.apache.logging.log4j:log4j-core:${log4j_version}")

    testCompileOnly("org.jetbrains:annotations:${jetbrains_annotations_version}")
    testRuntimeOnly("cpw.mods:bootstraplauncher:${bootstraplauncher_version}")
    testRuntimeOnly("org.apache.logging.log4j:log4j-core:$log4j_version")
    testImplementation(platform("org.junit:junit-bom:$jupiter_version"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.mockito:mockito-junit-jupiter:$mockito_version")
    testImplementation(platform("org.assertj:assertj-bom:$assertj_version"))
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation('com.google.jimfs:jimfs:1.3.0')
    testImplementation('net.bytebuddy:byte-buddy-agent:1.14.12')
    // For Testing purposes only
    localRuntime('net.bytebuddy:byte-buddy-agent:1.14.12')
    implementation(project(":startup"))

    // Provides the JUnit project as a BOM entry
    constraints {
        api(project(':junit'))
    }

    devagent project(":startup")
}

spotless {
    java {
        // courtesy of diffplug/spotless#240
        // https://github.com/diffplug/spotless/issues/240#issuecomment-385206606
        custom 'noWildcardImports', { String fileContents ->
            if (fileContents.contains('*;\n')) {
                throw new GradleException('No wildcard imports are allowed!')
            }
        }

        custom 'noNotNull', { String fileContents ->
            if (fileContents.contains('@NotNull') || fileContents.contains('@Nonnull')) {
                throw new GradleException('@NotNull and @Nonnull are disallowed.')
            }
        }
        bumpThisNumberIfACustomStepChanges(1)
    }
}
